{
	"name": "Fact_table_load",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "PetLicenseStageLoad",
						"type": "DatasetReference"
					},
					"name": "StageTableSource"
				},
				{
					"dataset": {
						"referenceName": "BreedDimSourceLoad",
						"type": "DatasetReference"
					},
					"name": "BreedDimSource"
				},
				{
					"dataset": {
						"referenceName": "LocationDimSourceLoad",
						"type": "DatasetReference"
					},
					"name": "LocationDimSource"
				},
				{
					"dataset": {
						"referenceName": "DateDimSourceLoad",
						"type": "DatasetReference"
					},
					"name": "DateDimSource"
				},
				{
					"dataset": {
						"referenceName": "Pet_Lic_Fact_SourceLoad",
						"type": "DatasetReference"
					},
					"name": "FactMaxID"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "Fact_table_load",
						"type": "DatasetReference"
					},
					"name": "TargetFact"
				}
			],
			"transformations": [
				{
					"name": "StageTableBreedDimJoin"
				},
				{
					"name": "LocatioDimJoin"
				},
				{
					"name": "DateDimJoin"
				},
				{
					"name": "CrossJoin"
				},
				{
					"name": "surrogateKey1"
				},
				{
					"name": "select1"
				}
			],
			"scriptLines": [
				"source(output(",
				"          LICENSE_ISSUE_DATE as date,",
				"          LICENSE_NUMBER as string,",
				"          ANIMAL_NAME as string,",
				"          SPECIES as string,",
				"          PRIMARY_BREED as string,",
				"          SECONDARY_BREED as string,",
				"          ZIP_CODE as string,",
				"          DI_JOB_ID as string,",
				"          DI_LOAD_DATE as date",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'table') ~> StageTableSource",
				"source(output(",
				"          BREED_SK as decimal(38,0),",
				"          BREED_NK as decimal(38,0),",
				"          START_DT as date,",
				"          END_DT as date,",
				"          IS_CURRENT as decimal(10,2),",
				"          BREED_DK as decimal(10,2),",
				"          SPECIES_NAME as string,",
				"          PRIMARY_BREED_NAME as string,",
				"          SECONDARY_BREED_NAME as string,",
				"          DI_JOB_ID as string,",
				"          DI_LOAD_DATE as date",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'table') ~> BreedDimSource",
				"source(output(",
				"          LOCATION_SK as decimal(38,0),",
				"          CITY as string,",
				"          STATE as string,",
				"          STATE_ABBR as string,",
				"          ZIP_CODE as string,",
				"          DI_JOB_ID as decimal(38,0),",
				"          DI_LOAD_DATE as date",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'table') ~> LocationDimSource",
				"source(output(",
				"          DT as date,",
				"          ABRV_DAY_NAME as string,",
				"          MONTH_NAME as string,",
				"          START_DAY_OF_MONTH as date,",
				"          END_DAY_OF_MONTH as date,",
				"          QUARTER_NUM as decimal(2,0),",
				"          DAY_OF_WEEK as decimal(2,0),",
				"          IS_WEEKEND as decimal(1,0),",
				"          YEAR_NUM as decimal(4,0),",
				"          MONTH_NUM as decimal(2,0),",
				"          DAY_NUM as decimal(2,0),",
				"          DATE_DIM_SK as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'table') ~> DateDimSource",
				"source(output(",
				"          PET_LIC_SK as decimal(38,0)",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     query: 'Select nvl(max(pet_lic_sk),0) as pet_lic_sk from temp_schema.pet_lic_fact',",
				"     format: 'query') ~> FactMaxID",
				"StageTableSource, BreedDimSource join(SPECIES == SPECIES_NAME",
				"     && PRIMARY_BREED == PRIMARY_BREED_NAME",
				"     && SECONDARY_BREED == SECONDARY_BREED_NAME,",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> StageTableBreedDimJoin",
				"StageTableBreedDimJoin, LocationDimSource join(StageTableSource@ZIP_CODE == LocationDimSource@ZIP_CODE,",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> LocatioDimJoin",
				"LocatioDimJoin, DateDimSource join(LICENSE_ISSUE_DATE == DT,",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> DateDimJoin",
				"DateDimJoin, FactMaxID join(1==1,",
				"     joinType:'cross',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> CrossJoin",
				"select1 keyGenerate(output(SK_ID as long),",
				"     startAt: 1L,",
				"     stepValue: 1L) ~> surrogateKey1",
				"CrossJoin select(mapColumn(",
				"          LICENSE_ISSUE_DATE,",
				"          LICENSE_NUMBER,",
				"          ANIMAL_NAME,",
				"          SPECIES,",
				"          PRIMARY_BREED,",
				"          SECONDARY_BREED,",
				"          ZIP_CODE = StageTableSource@ZIP_CODE,",
				"          BREED_SK,",
				"          BREED_NK,",
				"          START_DT,",
				"          END_DT,",
				"          IS_CURRENT,",
				"          BREED_DK,",
				"          SPECIES_NAME,",
				"          PRIMARY_BREED_NAME,",
				"          SECONDARY_BREED_NAME,",
				"          DI_JOB_ID = BreedDimSource@DI_JOB_ID,",
				"          DI_LOAD_DATE = BreedDimSource@DI_LOAD_DATE,",
				"          LOCATION_SK,",
				"          CITY,",
				"          STATE,",
				"          STATE_ABBR,",
				"          ZIP_CODE = LocationDimSource@ZIP_CODE,",
				"          DT,",
				"          ABRV_DAY_NAME,",
				"          MONTH_NAME,",
				"          START_DAY_OF_MONTH,",
				"          END_DAY_OF_MONTH,",
				"          QUARTER_NUM,",
				"          DAY_OF_WEEK,",
				"          IS_WEEKEND,",
				"          YEAR_NUM,",
				"          MONTH_NUM,",
				"          DAY_NUM,",
				"          DATE_DIM_SK,",
				"          PET_LIC_SK",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select1",
				"surrogateKey1 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          PET_LIC_SK as string,",
				"          DATE_SK as string,",
				"          BREED_SK as string,",
				"          LOCATION_SK as string,",
				"          DI_JOB_ID as string,",
				"          DI_CREATED_DT as string",
				"     ),",
				"     deletable:false,",
				"     insertable:true,",
				"     updateable:false,",
				"     upsertable:false,",
				"     format: 'table',",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     stageInsert: true,",
				"     mapColumn(",
				"          PET_LIC_SK = SK_ID,",
				"          DATE_SK = DATE_DIM_SK,",
				"          BREED_SK,",
				"          LOCATION_SK,",
				"          DI_JOB_ID,",
				"          DI_CREATED_DT = DI_LOAD_DATE",
				"     )) ~> TargetFact"
			]
		}
	}
}